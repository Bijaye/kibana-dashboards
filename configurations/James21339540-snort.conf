#####
input {
	file {
                path => "/var/log/mymessages"
                start_position => "end"
                sincedb_path => "/opt/logstash/.sincedb"
        }
	
}

filter {
	if [message] !~ "snort\[[0-9]{1,6}\]: \[[0-9]{1,6}:[0-9]{1,10}:[0-9]{1,6}\]|IN=(\s?|\S{2,5}) OUT=(\s?|\S{2,5}) MAC=|SASL PLAIN authentication failed|SASL LOGIN authentication failed" {
                drop { }
        } else {
	#snort
        if [message] =~ "snort\[[0-9]{1,6}\]: \[[0-9]{1,6}:[0-9]{1,10}:[0-9]{1,6}\]" {
		grok {
               		match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:snort}\[%{INT:snort_pid}\]\: \[%{INT:gid}\:%{INT:sid}\:%{INT:rev}\] %{DATA:ids_alert} \[Classification\: %{DATA:ids_classification}\] \[Priority\: %{INT:ids_priority}\] \{%{WORD:proto}\} %{IP:src_ip}\:%{INT:src_port} \-\> %{IP:dst_ip}\:%{INT:dst_port}" ]
			remove_field => [ "program", "pid", "data", "snort_pid", "ids_classification", "ids_priority", "junk", "unixtime" ]
			add_tag => [ "snort", "bad" ]
		}
	}
	#kernel firewall
	if [message] =~ "IN=(\s?|\S{2,5}) OUT=(\s?|\S{2,5}) MAC=" {
		grok {
			match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:kernel}: \[%{DATA:unixtime}\] IN=%{DATA:in_int} OUT=%{DATA:out_int} MAC=%{DATA:junk} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{NUMBER:len} TOS=%{DATA:junk} PREC=%{DATA:junk} TTL=%{NUMBER:junk} ID=%{NUMBER:junk} DF PROTO=%{WORD:proto} SPT=%{NUMBER:src_port} DPT=%{NUMBER:dst_port} WINDOW=%{NUMBER:junk} RES=%{DATA:junk} %{DATA:flags} URGP=%{NUMBER:junk}" ]
                	match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:kernel}: \[%{DATA:unixtime}\] IN=%{DATA:in_int} OUT=%{DATA:out_int} MAC=%{DATA:junk} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{NUMBER:len} TOS=%{DATA:junk} PREC=%{DATA:junk} TTL=%{NUMBER:junk} ID=%{NUMBER:junk} PROTO=%{WORD:proto} SPT=%{NUMBER:src_port} DPT=%{NUMBER:dst_port} WINDOW=%{NUMBER:junk} RES=%{DATA:junk} %{DATA:flags} URGP=%{NUMBER:junk}" ]
                	match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:kernel}: \[%{DATA:unixtime}\] IN=%{DATA:in_int} OUT=%{DATA:out_int} MAC=%{DATA:junk} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{POSINT:fullen} TOS=%{DATA:junk} PREC=%{DATA:junk} TTL=%{POSINT:junk} ID=%{NUMBER:junk} DF PROTO=%{WORD:proto} SPT=%{POSINT:src_port} DPT=%{POSINT:dst_port} LEN=%{POSINT:len}" ]
                	match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:kernel}: \[%{DATA:unixtime}\] IN=%{DATA:in_int} OUT=%{DATA:out_int} MAC=%{DATA:junk} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{POSINT:fullen} TOS=%{DATA:junk} PREC=%{DATA:junk} TTL=%{POSINT:junk} ID=%{NUMBER:junk} PROTO=%{WORD:proto} SPT=%{POSINT:src_port} DPT=%{POSINT:dst_port} LEN=%{POSINT:len} MARK=%{DATA:junk}" ]
			match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:kernel}: \[%{DATA:unixtime}\] IN=%{DATA:in_int} OUT=%{DATA:out_int} MAC=%{DATA:junk} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{POSINT:fullen} TOS=%{DATA:junk} PREC=%{DATA:junk} TTL=%{POSINT:junk} ID=%{NUMBER:junk} PROTO=%{WORD:proto} SPT=%{POSINT:src_port} DPT=%{POSINT:dst_port} LEN=%{POSINT:len}" ]
			match => [ "message", "%{SYSLOGTIMESTAMP:date} %{IPORHOST:device} %{WORD:kernel}: \[%{DATA:unixtime}\] %{WORD:sasl} authentication failed IN=%{DATA:in_int} OUT=%{DATA:out_int} MAC=%{DATA:junk} SRC=%{IP:src_ip} DST=%{IP:dst_ip} LEN=%{NUMBER:len} TOS=%{DATA:junk} PREC=%{DATA:junk} TTL=%{NUMBER:junk} ID=%{NUMBER:junk} DF PROTO=%{WORD:proto} SPT=%{NUMBER:src_port} DPT=%{NUMBER:dst_port} WINDOW=%{NUMBER:junk} RES=%{DATA:junk} %{DATA:flags} URGP=%{NUMBER:junk}" ]
			remove_field => [ "junk", "unixtime" ]
			add_tag => [ "kernel", "bad" ]
		}
	}
		#geoip source
		geoip {
                       	source => "src_ip"
                       	target => "src_geoip"
                       	fields => [ "ip", "country_code2", "country_name", "latitude", "longitude" ]
                }
                mutate {
                       	add_field => [ "src_coordinates", "%{[src_geoip][longitude]}", "src_tmplat", "%{[src_geoip][latitude]}" ]
                }
                mutate {
                       	merge => [ "src_coordinates", "src_tmplat" ]
                }
                mutate {
                       	convert => [ "src_coordinates", "float" ]
                }
		#geoip destination
		geoip {
                	source => "dst_ip"
                	target => "dst_geoip"
                	fields => [ "ip", "country_code2", "country_name", "latitude", "longitude" ]
                }
                mutate {
                       	add_field => [ "dst_coordinates", "%{[dst_geoip][longitude]}", "dst_tmplat", "%{[dst_geoip][latitude]}" ]
                }
                mutate {
                       	merge => [ "dst_coordinates", "dst_tmplat" ]
                }
                mutate {
                       	convert => [ "dst_coordinates", "float" ]
                }
		mutate {
                        gsub => [ "ids_alert", "[ \-\(\)\/]",  "_" ]
                        gsub => [ "src_geoip.country_name", "[ ]", "_" ]
                        gsub => [ "dst_geoip.country_name", "[ ]", "_" ]
                        remove_field => [ "ids_src_tmplat", "ids_dst_tmplat", "src_tmplat", "dst_tmplat" ]
                }

	}
}
output {
	stdout { codec => rubydebug }
	elasticsearch {
        	host => "192.168.1.253"
        }
}
